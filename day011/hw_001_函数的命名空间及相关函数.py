# _*_ coding:UTF-8 _*_
# 开发人员: 理想国真恵玩-张大鹏
# 开发团队: 理想国真恵玩
# 开发时间: 2019-04-14 07:36
# 文件名称: hw_001_函数的命名空间及相关函数.py
# 开发工具: PyCharm

# 命名空间
"""
1.内置命名空间:内置函数存放的地方
2.全局命名空间:当前.py文件的顶级
3.局部命名空间:函数里面的空间
"""

a = 333  # 全局


def show():
    b = 444  # 局部
    print(a)
    print(b)


show()

# 作用域
"""
1.局部可以使用全局变量,全局不可以使用局部变量
2.如果局部重新定义了全局变量,不会影响全局变量的值,而是看成是一个新的值
"""

a = 333


def show():
    b = 444
    a = 555
    print('函数内部'.center(22, '-'))
    print(b)
    print('a', a)


show()
print('函数外部'.center(22, '-'))
print('a', a)

"""
---------函数内部---------
444
a 555
---------函数外部---------
a 333

很明显就能看到,内部重新定义以后,不会对外部的同名变量产生影响
那如果我们想要让两个变量是同一个变量怎么操作
用关键字global
"""

a = 333


def show():
    global a
    a = 444
    print("a:", a)


print('--' * 22)
show()
print('a:', a)
"""
--------------------------------------------
a: 444
a: 444

使用global关键字以后,两个变量就变成了同一个变量
"""

# 两个相关的函数
a = 333


def show():
    global a
    a = 444
    print("a:", a)
    print('--' * 22)
    print('打印全局作用域的所有变量')
    print(globals())
    print(type(globals()))
    print('打印局部作用域的所有变量')
    print(locals())
    print(type(locals()))  # <class 'dict'> 字典类型


show()
